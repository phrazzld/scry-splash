name: E2E Tests

on:
  push:
    branches: '**'
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.css'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'playwright.config.ts'
      - '.github/workflows/e2e.yml'
  pull_request:
    branches: '**'
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.css'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'playwright.config.ts'
      - '.github/workflows/e2e.yml'
  # Allow manual triggers with options
  workflow_dispatch:
    inputs:
      run_all_browsers:
        description: 'Run tests on all browsers (not just Chromium)'
        required: false
        type: boolean
        default: false

jobs:
  e2e:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.x
          
      - name: Setup Node.js with pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          # Cache key based on runner OS, Playwright version, and browser selection
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.event.inputs.run_all_browsers || 'chromium-only' }}
          
      - name: Install Playwright browsers
        # Only install if cache miss or explicitly requested
        # Only install Chromium by default to speed up installation
        id: install-browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          # Make browser recovery script executable
          chmod +x e2e/scripts/browser-recovery.sh
          
          # Configuration
          MAX_RETRIES=3
          RETRY_DELAY=10
          ATTEMPT=1
          INSTALL_SUCCESS=false
          
          echo "::group::Browser Installation"
          
          while [ $ATTEMPT -le $MAX_RETRIES ] && [ "$INSTALL_SUCCESS" != "true" ]; do
            echo "Installation attempt $ATTEMPT of $MAX_RETRIES"
            
            # Determine which browsers to install
            if [ "${{ github.event.inputs.run_all_browsers }}" = "true" ]; then
              echo "Installing all browser engines..."
              BROWSERS="chromium firefox webkit"
            else
              echo "Installing Chromium specifically for CI..."
              BROWSERS="chromium"
            fi
            
            # Try standard installation first
            echo "Using standard installation method..."
            if [ $ATTEMPT -eq 1 ]; then
              # First attempt: Standard installation
              for BROWSER in $BROWSERS; do
                echo "Installing $BROWSER with dependencies..."
                pnpm exec playwright install $BROWSER --with-deps
              done
            else
              # Subsequent attempts: Use recovery script with exponential backoff
              echo "Using recovery method for attempt $ATTEMPT..."
              for BROWSER in $BROWSERS; do
                echo "Recovering $BROWSER installation..."
                bash e2e/scripts/browser-recovery.sh $BROWSER
              done
            fi
            
            # Basic verification to check if installation succeeded
            echo "Checking Playwright version..."
            if pnpm exec playwright --version; then
              # Further verify browser binaries exist
              if bash e2e/scripts/verify-browser-installation.sh --quiet; then
                INSTALL_SUCCESS=true
                echo "Browser installation successful on attempt $ATTEMPT"
                break
              else
                echo "Browser verification failed on attempt $ATTEMPT"
              fi
            else
              echo "Playwright command failed on attempt $ATTEMPT"
            fi
            
            # If we get here, installation failed - prepare for retry
            if [ $ATTEMPT -lt $MAX_RETRIES ]; then
              # Calculate exponential backoff delay: 10s, 30s, 90s
              SLEEP_TIME=$((RETRY_DELAY * (3 ** (ATTEMPT - 1))))
              echo "Waiting ${SLEEP_TIME} seconds before retry..."
              sleep $SLEEP_TIME
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          echo "::endgroup::"
          
          # Final verification and reporting
          if [ "$INSTALL_SUCCESS" = "true" ]; then
            echo "Browser installation completed successfully after $((ATTEMPT - 1)) attempt(s)"
            exit 0
          else
            echo "::error::Browser installation failed after $MAX_RETRIES attempts"
            echo "See logs for details. Browser verification will still be attempted in the next step."
            # Don't exit with error here - let the verification step determine if we can continue
          fi
      
      # Dedicated browser verification step - always run this regardless of cache status
      - name: Verify Playwright Browser Installation
        id: verify-browser
        # No 'if' condition - we want to run this even when browsers are loaded from cache
        # We do NOT use continue-on-error as browser verification is critical for test execution
        run: |
          echo "=== Playwright Browser Verification ==="
          
          # Make verification scripts executable
          chmod +x e2e/scripts/verify-browser-installation.sh
          chmod +x e2e/scripts/browser-recovery.sh
          
          # Define which browsers to verify
          if [ "${{ github.event.inputs.run_all_browsers }}" = "true" ]; then
            echo "Verifying all browser engines..."
            BROWSERS="chromium firefox webkit"
          else
            echo "Verifying Chromium specifically for CI..."
            BROWSERS="chromium"
          fi
          
          # Verify each browser
          VERIFICATION_SUCCESS=true
          for BROWSER in $BROWSERS; do
            echo "Verifying $BROWSER browser installation..."
            # Use enhanced verification script - non-quiet mode for full details
            if ! bash e2e/scripts/verify-browser-installation.sh --browser=$BROWSER; then
              echo "::warning::Verification failed for $BROWSER. Attempting recovery..."
              
              # Try to recover
              if bash e2e/scripts/browser-recovery.sh $BROWSER; then
                echo "::notice::Recovery successful for $BROWSER!"
                
                # Verify again to confirm recovery worked
                if bash e2e/scripts/verify-browser-installation.sh --browser=$BROWSER --quiet; then
                  echo "::notice::Verification successful after recovery for $BROWSER!"
                else
                  echo "::error::Verification still failing for $BROWSER after recovery"
                  VERIFICATION_SUCCESS=false
                fi
              else
                echo "::error::Recovery failed for $BROWSER"
                VERIFICATION_SUCCESS=false
              fi
            fi
          done
          
          # Run the browser verification test for Chromium
          echo "Testing Chromium browser launch with functional verification test..."
          if NEXT_PUBLIC_FORMSPARK_FORM_ID=test-form-id pnpm exec playwright test e2e/browser-verification.spec.ts --project=chromium; then
            echo "Functional verification test passed!"
          else
            echo "::error::Functional verification test failed!"
            VERIFICATION_SUCCESS=false
          fi
          
          # Final verification status
          if [ "$VERIFICATION_SUCCESS" = "true" ]; then
            echo "Browser verification completed successfully!"
            exit 0
          else
            echo "::error::Browser verification failed! Some browsers may not work correctly."
            exit 1
          fi
        
      # Setup phase - Create directories and verify permissions
      - name: Validate Test Environment
        id: validate-env
        run: |
          # Create artifact directories with explicit permissions
          mkdir -p test-results/e2e-artifacts/screenshots
          mkdir -p test-results/e2e-artifacts/videos
          mkdir -p test-results/e2e-artifacts/traces
          mkdir -p test-results/e2e-artifacts/downloads
          mkdir -p playwright-report
          
          # Set proper permissions
          chmod -R 777 test-results
          chmod -R 777 playwright-report
          
          # Run environment validation script
          bash e2e/scripts/validate-environment.sh
        continue-on-error: true
      
      # Validation phase - Verify setup was successful
      - name: Verify Environment Setup
        run: |
          # Check environment validation outcome
          if [ "${{ steps.validate-env.outcome }}" != "success" ]; then
            echo "::warning::Environment validation had issues, but we'll try to continue. Check the logs for details."
          else
            echo "Environment validation successful"
          fi
          
          # Check browser verification outcome
          if [ "${{ steps.verify-browser.outcome }}" != "success" ]; then
            echo "::error::Browser verification failed. This is a critical issue that will prevent tests from running."
            echo "Please check the browser verification logs for details on the failure."
          else
            echo "Browser verification successful. Chromium is properly installed and functional."
          fi
          
          # Verify critical directories exist
          if [ ! -d "test-results/e2e-artifacts" ]; then
            echo "::error::Required artifact directory not found"
            mkdir -p test-results/e2e-artifacts
          fi
          
          # Report environment info for debugging
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "OS Info: $(uname -a)"
      
      # Test execution phase with segmented test runs
      - name: Run functional tests (non-visual)
        id: functional-tests
        run: pnpm playwright test --grep-invert "@visual"
        continue-on-error: true
        env:
          NEXT_PUBLIC_FORMSPARK_FORM_ID: test-form-id
          RUN_ALL_BROWSERS: ${{ github.event.inputs.run_all_browsers == true && '1' || '0' }}
          CI: true
          PLAYWRIGHT_TEST_GREP_INVERT: "@visual" # Skip all visual tests
      
      - name: Run visual tests (if explicitly enabled)
        id: visual-tests
        # Only run visual tests if explicitly enabled or when manually triggered
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: pnpm playwright test --grep "@visual"
        continue-on-error: true
        env:
          NEXT_PUBLIC_FORMSPARK_FORM_ID: test-form-id
          RUN_ALL_BROWSERS: ${{ github.event.inputs.run_all_browsers == true && '1' || '0' }}
          CI: true
          PLAYWRIGHT_TEST_GREP: "@visual" # Only run visual tests
          VISUAL_TESTS_ENABLED_IN_CI: '1' # Visual tests enabled for this step
          # To control snapshot update mode, set one of:
          # PLAYWRIGHT_UPDATE_SNAPSHOTS: 'missing' - Only add snapshots that don't exist
          # PLAYWRIGHT_UPDATE_SNAPSHOTS: 'on-failure' - Update snapshots for failing tests
          # PLAYWRIGHT_UPDATE_SNAPSHOTS: 'all' - Update all snapshots
      
      # Artifact collection phase with explicit validation
      - name: Prepare test artifacts
        if: always()
        run: |
          echo "=== Test Results Summary ==="
          echo "Stable tests: ${{ steps.stable-tests.outcome }}"
          echo "Flaky tests: ${{ steps.flaky-tests.outcome }}"
          
          # Verify artifact directories
          echo "=== Validating artifact directories ==="
          mkdir -p test-results/e2e-artifacts
          mkdir -p playwright-report
          
          # List available artifacts for debugging
          echo "=== Available artifact directories ==="
          ls -la test-results/ || echo "No test-results directory"
          ls -la test-results/e2e-artifacts/ || echo "No e2e-artifacts directory"
      
      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          
      - name: Upload E2E test artifacts
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: e2e-artifacts
          path: test-results/e2e-artifacts/
          retention-days: 30
      
      - name: Verify artifact upload
        if: always()
        run: |
          if [ "${{ steps.upload-artifacts.outcome }}" != "success" ]; then
            echo "::warning::Artifact upload had issues. Attempting fallback upload..."
            # Try creating a simple artifact to debug upload issues
            echo "Fallback artifact" > test-results/fallback.txt
          else
            echo "Artifact upload successful"
          fi
          
      - name: Fallback artifact upload
        uses: actions/upload-artifact@v4
        if: always() && steps.upload-artifacts.outcome != 'success'
        with:
          name: fallback-debug-info
          path: test-results/
          retention-days: 7
          
      # Final status check
      - name: Determine workflow success
        if: always()
        run: |
          if [ "${{ steps.functional-tests.outcome }}" != "success" ]; then
            echo "::error::Functional tests failed. This is considered a workflow failure."
            exit 1
          elif [ "${{ steps.visual-tests.outcome }}" != "success" ] && [ "${{ steps.visual-tests.conclusion }}" != "skipped" ]; then
            echo "::warning::Visual tests failed, but functional tests passed. Marking workflow as successful."
          else
            echo "All tests passed successfully."
          fi