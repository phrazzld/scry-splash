name: E2E Tests

on:
  push:
    branches: '**'
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.css'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'playwright.config.ts'
      - '.github/workflows/e2e.yml'
  pull_request:
    branches: '**'
    paths:
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.css'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'playwright.config.ts'
      - '.github/workflows/e2e.yml'
  # Allow manual triggers with options
  workflow_dispatch:
    inputs:
      run_all_browsers:
        description: 'Run tests on all browsers (not just Chromium)'
        required: false
        type: boolean
        default: false

jobs:
  e2e:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.x
          
      - name: Setup Node.js with pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          # Cache key based on runner OS, Playwright version, and browser selection
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.event.inputs.run_all_browsers || 'chromium-only' }}
          
      - name: Install Playwright browsers
        # Only install if cache miss or explicitly requested
        # Only install Chromium by default to speed up installation
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          if [ "${{ github.event.inputs.run_all_browsers }}" = "true" ]; then
            echo "Installing all browser engines..."
            pnpm exec playwright install --with-deps
          else
            echo "Installing Chromium specifically for CI..."
            pnpm exec playwright install chromium --with-deps
            echo "Verifying Chromium installation..."
            pnpm exec playwright install-deps chromium
            
            # Verify installation directory exists and show contents for debugging
            echo "Checking Playwright browser installation directories:"
            ls -la ~/.cache/ms-playwright/ || echo "Directory not found"
            
            # Additional verification of Chromium
            if [ -d "$HOME/.cache/ms-playwright/chromium-"* ]; then
              echo "Chromium browser directory found in cache"
              find ~/.cache/ms-playwright/ -name "*chromium*" || echo "Chromium details not found"
            else
              echo "Chromium directory not found, checking version output"
              pnpm exec playwright --version
              
              # Force reinstall if not found
              echo "Attempting to reinstall Chromium with force flag"
              PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=0 pnpm exec playwright install chromium --with-deps
            fi
          fi
        
      # Setup phase - Create directories and verify permissions
      - name: Validate Test Environment
        id: validate-env
        run: |
          # Create artifact directories with explicit permissions
          mkdir -p test-results/e2e-artifacts/screenshots
          mkdir -p test-results/e2e-artifacts/videos
          mkdir -p test-results/e2e-artifacts/traces
          mkdir -p test-results/e2e-artifacts/downloads
          mkdir -p playwright-report
          
          # Set proper permissions
          chmod -R 777 test-results
          chmod -R 777 playwright-report
          
          # Run environment validation script
          bash e2e/scripts/validate-environment.sh
        continue-on-error: true
      
      # Validation phase - Verify setup was successful
      - name: Verify Environment Setup
        run: |
          if [ "${{ steps.validate-env.outcome }}" != "success" ]; then
            echo "::warning::Environment validation had issues, but we'll try to continue. Check the logs for details."
          else
            echo "Environment validation successful"
          fi
          
          # Verify critical directories exist
          if [ ! -d "test-results/e2e-artifacts" ]; then
            echo "::error::Required artifact directory not found"
            mkdir -p test-results/e2e-artifacts
          fi
          
          # Report environment info for debugging
          echo "Node.js version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "OS Info: $(uname -a)"
      
      # Test execution phase with segmented test runs
      - name: Run stable E2E tests
        id: stable-tests
        run: pnpm playwright test --grep "@stable"
        continue-on-error: true
        env:
          NEXT_PUBLIC_FORMSPARK_FORM_ID: test-form-id
          RUN_ALL_BROWSERS: ${{ github.event.inputs.run_all_browsers == true && '1' || '0' }}
          CI: true
      
      - name: Run potentially flaky E2E tests
        id: flaky-tests
        run: pnpm playwright test --grep-invert "@stable"
        continue-on-error: true
        env:
          NEXT_PUBLIC_FORMSPARK_FORM_ID: test-form-id
          RUN_ALL_BROWSERS: ${{ github.event.inputs.run_all_browsers == true && '1' || '0' }}
          CI: true
          RETRY_FACTOR: 2
      
      # Artifact collection phase with explicit validation
      - name: Prepare test artifacts
        if: always()
        run: |
          echo "=== Test Results Summary ==="
          echo "Stable tests: ${{ steps.stable-tests.outcome }}"
          echo "Flaky tests: ${{ steps.flaky-tests.outcome }}"
          
          # Verify artifact directories
          echo "=== Validating artifact directories ==="
          mkdir -p test-results/e2e-artifacts
          mkdir -p playwright-report
          
          # List available artifacts for debugging
          echo "=== Available artifact directories ==="
          ls -la test-results/ || echo "No test-results directory"
          ls -la test-results/e2e-artifacts/ || echo "No e2e-artifacts directory"
      
      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          
      - name: Upload E2E test artifacts
        id: upload-artifacts
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: e2e-artifacts
          path: test-results/e2e-artifacts/
          retention-days: 30
      
      - name: Verify artifact upload
        if: always()
        run: |
          if [ "${{ steps.upload-artifacts.outcome }}" != "success" ]; then
            echo "::warning::Artifact upload had issues. Attempting fallback upload..."
            # Try creating a simple artifact to debug upload issues
            echo "Fallback artifact" > test-results/fallback.txt
          else
            echo "Artifact upload successful"
          fi
          
      - name: Fallback artifact upload
        uses: actions/upload-artifact@v4
        if: always() && steps.upload-artifacts.outcome != 'success'
        with:
          name: fallback-debug-info
          path: test-results/
          retention-days: 7
          
      # Final status check
      - name: Determine workflow success
        if: always()
        run: |
          if [ "${{ steps.stable-tests.outcome }}" != "success" ]; then
            echo "::error::Stable tests failed. This is considered a workflow failure."
            exit 1
          elif [ "${{ steps.flaky-tests.outcome }}" != "success" ]; then
            echo "::warning::Some flaky tests failed, but stable tests passed. Marking workflow as successful."
          else
            echo "All tests passed successfully."
          fi