#!/bin/bash

# Set constants
PROJECT_ROOT=$(git rev-parse --show-toplevel)
LOGS_DIR="$PROJECT_ROOT/.githooks/logs"
TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
LOG_FILE="$LOGS_DIR/glance-$TIMESTAMP.log"
ERROR_LOG_FILE="$LOGS_DIR/glance-$TIMESTAMP-error.log"
LATEST_LOG_LINK="$LOGS_DIR/glance-latest.log"

# Check if glance command exists
if ! command -v glance &> /dev/null; then
  echo "⚠️  Warning: glance command not found. Please install glance to enable post-commit hook functionality."
  echo "    See README.md for installation instructions."
  exit 0
fi

# Create logs directory if it doesn't exist
mkdir -p "$LOGS_DIR"

# Start log file with header information
{
  echo "====== GLANCE POST-COMMIT LOG ======"
  echo "Date: $(date)"
  echo "Repository: $PROJECT_ROOT"
  echo "Commit: $(git rev-parse HEAD)"
  echo "User: $(git config user.name) <$(git config user.email)>"
  echo "======================================="
  echo ""
} > "$LOG_FILE"

# Function to handle cleanup and reporting on exit
function cleanup_and_report {
  local exit_code=$1
  
  # Create symbolic link to latest log for easy access
  if [ -f "$LATEST_LOG_LINK" ]; then
    rm "$LATEST_LOG_LINK"
  fi
  ln -sf "$LOG_FILE" "$LATEST_LOG_LINK"
  
  # Check exit code and report appropriately
  if [ $exit_code -ne 0 ]; then
    # Log error details
    {
      echo "ERROR: glance exited with code $exit_code at $(date)"
      echo "See full log at: $LOG_FILE"
    } > "$ERROR_LOG_FILE"
    
    # Notify user on next terminal input by writing to stderr
    echo "⚠️  glance encountered an error (code: $exit_code). See logs at: $LOG_FILE" >&2
    return 1
  fi
  
  return 0
}

# Run glance in controlled subshell to capture exit code
(
  echo "Running: glance $PROJECT_ROOT" >> "$LOG_FILE"
  glance "$PROJECT_ROOT" >> "$LOG_FILE" 2>&1
  exit_code=$?
  
  # Record exit status in log
  echo "Exit code: $exit_code" >> "$LOG_FILE"
  echo "Completed at: $(date)" >> "$LOG_FILE"
  
  # Call cleanup function with exit code
  cleanup_and_report $exit_code
) &

# Display a message indicating the post-commit task started
echo "⚡ Running glance in the background (logs: $LOG_FILE)..."
echo "  View latest log with: cat $LATEST_LOG_LINK"